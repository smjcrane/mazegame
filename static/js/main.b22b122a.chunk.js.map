{"version":3,"sources":["serviceWorker.js","mazemaker.js","Wall.js","Dot.js","WallRow.js","Square.js","SquareRow.js","Grid.js","MoveButton.js","Controls.js","RandomizeButton.js","Game.js","index.js"],"names":["isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","getNeighbours","pos","gridsize","cells","neighbours","x","y","push","countUnvisitedCells","map","row","filter","length","reduce","acc","val","pick","walls","myCell","numToVisit","r","Math","round","random","find","i","j","myNeighbour","vertical_walls","horizontal_walls","nextNeighbours","getAll","n","generate_maze","maze","vert","hor","Array","fill","allWalls","interiorWalls","grid","noSquares","startX","startY","addSides","Wall","props","className","orientation","blocking","Dot","WallRow","elements","this","size","key","React","Component","Square","src","occupied","coin","SquareRow","personX","coinX","Grid","personY","MoveButton","type","onClick","move","dir","Controls","RandomizeButton","newMaze","Game","s","parseInt","event","checkForVictory","document","addEventListener","handleKeyDown","bind","removeEventListener","setState","generateNewMaze","domContainer","querySelector","ReactDOM","render","URL","process","href","origin","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.b22b122a.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","function generate_maze(gridsize){\r\n    //all interior walls start off filled in (value 1)\r\n    var walls = interiorWalls(gridsize);\r\n    //cells start off unexplored (value 1)\r\n    var cells = noSquares(gridsize);\r\n    //except one\r\n    let startX = Math.round(Math.random() * gridsize - 0.5);\r\n    let startY = Math.round(Math.random() * gridsize - 0.5);\r\n    cells[startX][startY] = 0;\r\n    let maze = {walls: walls, cells: cells};\r\n    while (countUnvisitedCells(maze.cells)){\r\n        maze = pick(gridsize, maze.cells, maze.walls);\r\n    }\r\n    maze = addSides(maze);\r\n    return {vertical_walls: maze.walls.vertical_walls,\r\n    horizontal_walls: maze.walls.horizontal_walls};\r\n  }\r\n  \r\n  function allWalls(gridsize) {\r\n    var vert = [];\r\n    var hor = [];\r\n    for (var i = 0; i < gridsize; i++) {\r\n        var row = Array(gridsize + 1).fill(1);\r\n        vert.push(row);\r\n    }\r\n    for (var i = 0; i < gridsize + 1; i++) {\r\n        var row = Array(gridsize).fill(1);\r\n        hor.push(row);\r\n    }\r\n    return {\r\n        vertical_walls: vert,\r\n        horizontal_walls: hor\r\n    };\r\n  }\r\n  \r\n  function interiorWalls(gridsize) {\r\n    var maze = allWalls(gridsize);\r\n    for (var i = 0; i < gridsize; i++) {\r\n        maze.vertical_walls[i][0] = 0;\r\n        maze.vertical_walls[i][gridsize] = 0;\r\n    }\r\n    maze.horizontal_walls[0] = Array(gridsize).fill(0);\r\n    maze.horizontal_walls[gridsize] = Array(gridsize).fill(0);\r\n    return maze;\r\n  }\r\n  \r\n  function noSquares(gridsize) {\r\n    var grid = [];\r\n    for (var i = 0; i < gridsize; i++) {\r\n        var row = Array(gridsize).fill(1);\r\n        grid.push(row);\r\n    }\r\n    return grid;\r\n  }\r\n  \r\n  function addSides(maze) {\r\n    var gridsize = maze.walls.vertical_walls.length;\r\n    for (var i = 0; i < gridsize; i++) {\r\n        maze.walls.vertical_walls[i][0] = 1;\r\n        maze.walls.vertical_walls[i][gridsize] = 1;\r\n    }\r\n    maze.walls.horizontal_walls[0] = Array(gridsize).fill(1);\r\n    maze.walls.horizontal_walls[gridsize] = Array(gridsize).fill(1);\r\n    return maze;\r\n  }\r\n  \r\n  function getAll(pos, gridsize, cells){\r\n    let neighbours = [];\r\n    if (pos.x > 0){\r\n        neighbours.push({x: pos.x - 1, y: pos.y});\r\n    }\r\n    if (pos.y > 0){\r\n        neighbours.push({x: pos.x, y: pos.y - 1});\r\n    }\r\n    if (pos.x < gridsize - 1){\r\n        neighbours.push({x: pos.x + 1, y: pos.y});\r\n    }\r\n    if (pos.y < gridsize - 1){\r\n        neighbours.push({x: pos.x, y: pos.y + 1});\r\n    }\r\n    return neighbours;\r\n  }\r\n  \r\n  function getNeighbours(pos, gridsize, cells){\r\n    let neighbours = [];\r\n    if (pos.x > 0){\r\n        if (cells[pos.x - 1][pos.y] == 1){\r\n            neighbours.push({x: pos.x - 1, y: pos.y});\r\n        }\r\n    }\r\n    if (pos.y > 0){\r\n        if (cells[pos.x][pos.y - 1] == 1){\r\n            neighbours.push({x: pos.x, y: pos.y - 1});\r\n        }\r\n    }\r\n    if (pos.x < gridsize - 1){\r\n        if (cells[pos.x + 1][pos.y] == 1){\r\n            neighbours.push({x: pos.x + 1, y: pos.y});\r\n        }\r\n    }\r\n    if (pos.y < gridsize - 1){\r\n        if (cells[pos.x][pos.y + 1] == 1){\r\n            neighbours.push({x: pos.x, y: pos.y + 1});\r\n        }\r\n    }\r\n    return neighbours;\r\n  }\r\n  \r\n  function countUnvisitedCells(cells) {\r\n    var numToVisit = cells.map(function (row) {\r\n        return row.filter(function (x) {\r\n            return x == 0;\r\n        }).length;\r\n    }).reduce(function (acc, val) {\r\n        return acc + val;\r\n    });\r\n    return numToVisit;\r\n  }\r\n  \r\n  function pick(gridsize, cells, walls){\r\n    let numToVisit = countUnvisitedCells(cells);\r\n    let r = Math.round(Math.random() * numToVisit - 0.5);\r\n    let myCell;\r\n    find:\r\n    for (var i = 0; i < cells.length; i++) {\r\n        for (var j = 0; j < cells[0].length; j++) {\r\n            if (cells[i][j] == 0) {\r\n                if (r == 0) {\r\n                    myCell = {x: i, y: j};\r\n                    break find;\r\n                }\r\n                r--;\r\n            }\r\n        }\r\n    }\r\n    let neighbours = getNeighbours(myCell, gridsize, cells)\r\n    let r2 = Math.round(Math.random() * neighbours.length - 0.5);\r\n    let myNeighbour = neighbours[r2];\r\n    if (myNeighbour.x == myCell.x){\r\n        if (myNeighbour.y > myCell.y) {\r\n            walls.vertical_walls[myCell.x][myCell.y + 1] = 0;\r\n        } else {\r\n            walls.vertical_walls[myCell.x][myCell.y] = 0;\r\n        }\r\n    } else {\r\n        if (myNeighbour.x > myCell.x) {\r\n            walls.horizontal_walls[myCell.x + 1][myCell.y] = 0;\r\n        } else {\r\n            walls.horizontal_walls[myCell.x][myCell.y] = 0;\r\n        }\r\n    }\r\n    cells[myCell.x][myCell.y] = neighbours.length > 1 ? 0 : -1;\r\n    cells[myNeighbour.x][myNeighbour.y] = getNeighbours(myNeighbour, gridsize, cells).length > 0 ? 0 : -1;\r\n    let nextNeighbours = getAll(myNeighbour, gridsize, cells);\r\n    for (let i = 0; i < nextNeighbours.length; i++){\r\n        let n = nextNeighbours[i];\r\n        if (cells[n.x][n.y] == 0){\r\n            cells[n.x][n.y] = getNeighbours(n, gridsize, cells).length > 0 ? 0 : -1;\r\n        }\r\n    }\r\n    return {cells: cells, walls: walls}\r\n  }\r\n\r\n  export default generate_maze;","import React from \"react\";\r\n\r\nfunction Wall(props) {\r\n  return (\r\n      <div className=\"wall\" \r\n      orientation={props.orientation}   \r\n      blocking={props.blocking ? \"true\" : \"false\"} >\r\n      </div>\r\n  );\r\n}\r\n\r\nexport default Wall;","import React from \"react\";\r\n\r\nfunction Dot() {\r\n  return (<div className=\"dot\" />);\r\n}\r\n\r\nexport default Dot;","import React from \"react\";\r\nimport Wall from \"./Wall.js\";\r\nimport Dot from \"./Dot.js\";\r\n\r\nclass WallRow extends React.Component {\r\n  render() {\r\n    let elements = [];\r\n    for (let i = 0; i < this.props.size; i++) {\r\n        elements.push(<Dot key={2*i}/>);\r\n        elements.push(<Wall orientation=\"horizontal\" \r\n          key={2*i+1}\r\n          blocking={this.props.walls[i]}/>);\r\n    };\r\n    elements.push(<Dot key={2*this.props.size}/>);\r\n    return (\r\n      <div className=\"wallRow\">\r\n      {elements}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default WallRow;","import React from \"react\";\r\n\r\nfunction Square(props) {\r\n  return (<img src={props.occupied ? \"person.png\" : props.coin ? \"coin.png\" : \"none.png\"}\r\n  className=\"square\" />);\r\n}\r\n\r\nexport default Square;","import React from \"react\";\r\nimport Square from \"./Square.js\";\r\nimport Wall from \"./Wall.js\";\r\n\r\nfunction SquareRow(props) {\r\n  let elements = [];\r\n  for (let i = 0; i < props.size; i++) {\r\n      elements.push(<Wall orientation=\"vertical\" \r\n        key={2*i}\r\n        blocking={props.walls[i]}/>);\r\n      elements.push(<Square key={2*i+1} \r\n      occupied={props.personX==i ? 1 : 0}\r\n      coin = {props.coinX == i ? 1 : 0}/>);\r\n  };\r\n  elements.push(<Wall orientation=\"vertical\" \r\n    key={2*props.size}\r\n    blocking={props.walls[props.size]}/>);\r\n  return (\r\n    <div className=\"wallRow\">\r\n    {elements}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default SquareRow;","import React from \"react\";\r\nimport WallRow from \"./WallRow.js\";\r\nimport SquareRow from \"./SquareRow\";\r\n\r\nfunction Grid(props) {\r\n  let elements=[];\r\n  for (let i = 0; i < props.gridsize; i++) {\r\n    elements.push(<WallRow size={props.gridsize} \r\n      key={2*i}\r\n      walls={props.horizontal_walls[i]}/>);\r\n    elements.push(<SquareRow size={props.gridsize} \r\n      key={2*i+1}\r\n      walls={props.vertical_walls[i]}\r\n      personX={props.personY==i ? props.personX : -1}\r\n      coinX={props.gridsize - 1 == i ? props.gridsize - 1 : -1}/>);\r\n  }\r\n  elements.push(<WallRow size={props.gridsize} \r\n    key={2*props.gridsize}\r\n    walls={props.horizontal_walls[props.gridsize]}/>);\r\n  return(\r\n    <div className=\"grid\">\r\n      {elements}\r\n    </div> );\r\n}\r\n\r\nexport default Grid;","import React from \"react\";\r\n\r\nfunction MoveButton(props) {\r\n  return (\r\n    <input className=\"move\"\r\n    type=\"image\"\r\n    onClick={() => props.move(props.dir)} \r\n    src={props.dir + \".png\"} />\r\n  );\r\n}\r\n\r\nexport default MoveButton;","import React from \"react\";\r\nimport MoveButton from \"./MoveButton.js\";\r\n\r\nfunction Controls(props) {\r\n  return (\r\n    <div className=\"controls\">\r\n      <MoveButton dir=\"left\" move={(dir) => props.move(dir)}/>\r\n      <MoveButton dir=\"up\" move={props.move}/>\r\n      <MoveButton dir=\"down\" move={props.move}/>\r\n      <MoveButton dir=\"right\" move={props.move}/>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Controls;","import React from \"react\";\r\n\r\nfunction RandomizeButton(props) {\r\n  return (\r\n    <button onClick={props.newMaze}>\r\n      New Maze\r\n    </button>\r\n  );\r\n}\r\n\r\nexport default RandomizeButton;","import React from \"react\";\r\nimport generate_maze from \"./mazemaker.js\";\r\nimport Grid from \"./Grid.js\";\r\nimport Controls from \"./Controls.js\";\r\nimport RandomizeButton from \"./RandomizeButton.js\";\r\n\r\nclass Game extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    let s = parseInt(props.gridsize);\r\n    let maze = generate_maze(s);\r\n    this.state = {\r\n      personX: 0,\r\n      personY: 0,\r\n      vertical_walls: maze.vertical_walls,\r\n      horizontal_walls: maze.horizontal_walls\r\n    };\r\n  }\r\n\r\n  handleKeyDown(event){\r\n    let dir;\r\n    switch (event.key) {\r\n      case \"ArrowUp\":\r\n        dir = \"up\";\r\n        break;\r\n      case \"ArrowDown\":\r\n        dir = \"down\";\r\n        break;\r\n      case \"ArrowLeft\":\r\n        dir = \"left\";\r\n        break;\r\n      case \"ArrowRight\":\r\n        dir = \"right\";\r\n        break;\r\n    }\r\n    this.move(dir);\r\n    this.checkForVictory();\r\n  }\r\n\r\n  componentWillMount(){\r\n    document.addEventListener(\"keydown\", this.handleKeyDown.bind(this));\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    document.removeEventListener(\"keydown\", this.handleKeyDown.bind(this));\r\n  }\r\n\r\n  generateNewMaze() {\r\n    let s = parseInt(this.props.gridsize);\r\n    let maze = generate_maze(s);\r\n    this.setState( {\r\n      personX: 0,\r\n      personY: 0,\r\n      vertical_walls: maze.vertical_walls,\r\n      horizontal_walls: maze.horizontal_walls\r\n    } );\r\n  }\r\n\r\n  move(dir) {\r\n    console.log(dir);\r\n    switch(dir) {\r\n      case \"left\":\r\n        if (this.state.personX > 0 \r\n          && !this.state.vertical_walls[this.state.personY][this.state.personX]){\r\n          this.setState({\r\n            personX: this.state.personX - 1,\r\n            personY: this.state.personY,\r\n            vertical_walls: this.state.vertical_walls,\r\n            horizontal_walls: this.state.horizontal_walls\r\n          });\r\n        } else {\r\n          console.log (\"You can't go there\")\r\n        }\r\n        break;\r\n      case \"right\":\r\n        if (this.state.personX < this.props.gridsize - 1\r\n          && !this.state.vertical_walls[this.state.personY][this.state.personX + 1]){\r\n          this.setState({\r\n            personX: this.state.personX + 1,\r\n            personY: this.state.personY,\r\n            vertical_walls: this.state.vertical_walls,\r\n            horizontal_walls: this.state.horizontal_walls\r\n          });\r\n        } else {\r\n          console.log (\"You can't go there\")\r\n        }\r\n        break;\r\n      case \"up\":\r\n        if (this.state.personY > 0\r\n          && !this.state.horizontal_walls[this.state.personY][this.state.personX]){\r\n          this.setState({\r\n            personX: this.state.personX,\r\n            personY: this.state.personY - 1,\r\n            vertical_walls: this.state.vertical_walls,\r\n            horizontal_walls: this.state.horizontal_walls\r\n          });\r\n        } else {\r\n          console.log (\"You can't go there\")\r\n        }\r\n        break;\r\n      case \"down\":\r\n        if (this.state.personY < this.props.gridsize - 1\r\n          && !this.state.horizontal_walls[this.state.personY + 1][this.state.personX]){\r\n          this.setState({\r\n            personX: this.state.personX,\r\n            personY: this.state.personY + 1,\r\n            vertical_walls: this.state.vertical_walls,\r\n            horizontal_walls: this.state.horizontal_walls\r\n          });\r\n        } else {\r\n          console.log (\"You can't go there\")\r\n        }\r\n        break;\r\n    }\r\n  }\r\n\r\n  checkForVictory() {\r\n    if (this.state.personX == this.props.gridsize  - 1 \r\n      & this.state.personY == this.props.gridsize - 1){\r\n        this.generateNewMaze();\r\n      }\r\n  }\r\n  \r\n  render() {\r\n    return(\r\n      <div className=\"game\">\r\n        <Grid gridsize={this.props.gridsize} \r\n          horizontal_walls={this.state.horizontal_walls}\r\n          vertical_walls={this.state.vertical_walls}\r\n          personX={this.state.personX}\r\n          personY={this.state.personY} />\r\n        <Controls move={(dir) => {\r\n          this.move(dir);\r\n          this.checkForVictory();\r\n          }}/>\r\n        <RandomizeButton newMaze={() => this.generateNewMaze()}/>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Game;","import * as serviceWorker from './serviceWorker';\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport Game from \"./Game.js\"\n\nconst domContainer = document.querySelector('#root');\nReactDOM.render( <Game gridsize=\"15\" />,\n     domContainer);\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}